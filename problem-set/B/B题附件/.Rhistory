install.packages("KernSmooth")
library("KernSmooth")
library("swirl")
swirl()
swirl
swirl()
info()
main()
main
skip()
swirl()
main()
main()
main()
info()
play()
nnxt()
swirl
swirl()
0
siwrl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAs = FALSE)
mydf <- read.csv(path2csv, stringsAs = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library("dplyr")
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
x
select(cran, -time)
-(5:20)
select(X:size)
select(X)
select()
X:size
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",country == "US")
filter()
filter(cran, r_version == "3.1.1",country == "US")
filter(cran, r_version == "3.1.1",country == "US")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
?Comparison
filter(cran, r_version == "3.1.1",country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os ==
| "linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
rrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb /2^10)
cran3
mutate(cran3, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df()
library(dplyr)
cran <- tbl_df(mydf)
quit()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
library(dplyr)
rm("mydf")
cran
group_by()
cran
?group_by
by_package <- group_by(cran, )
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
by_package
summarize(by_package, mean(size))
submit()
reset()
submit()
reset()
submit()
submit()
quit
quit()
library(datasets)
data(iris)
?iris
names(iris)
mean(iris$Sepal.Length)
names(iris$Sepal.Length)
names(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars$cyl
mtcars$mpg
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364 - 15.10000
debug(ls)
ls()
q
quit()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
plot(x, y, e)
plot3(x, y, e)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?lm
system.time()
setwd("~/Projects/R")
source("OO.R")
shape <- Shape()
shape$isShape()
tri <- Triangle(3,4,5)
tri$isShape()
tri$getArea()
tri$getA()
settings
source("https://bioconductor.org/biocLite.R")
biocLite("GWASTools")
biocLite("GWASTools")
a
library(GWASTools)
library(SNPRelate)
bed.fn <- system.file("extdata", "plinkhapmap.bed.gz", package="SNPRelate")
fam.fn <- system.file("extdata", "plinkhapmap.fam.gz", package="SNPRelate")
bim.fn <- system.file("extdata", "plinkhapmap.bim.gz", package="SNPRelate")
gdsfile <- "snps.gds"
snpgdsBED2GDS(bed.fn, fam.fn, bim.fn, gdsfile, family=TRUE,
cvt.chr="int", cvt.snpid="int", verbose=FALSE)
install.packages("SNPRelate")
biocLite("SNPRelate")
library(GWASTools)
library(SNPRelate)
bed.fn <- system.file("extdata", "plinkhapmap.bed.gz", package="SNPRelate")
fam.fn <- system.file("extdata", "plinkhapmap.fam.gz", package="SNPRelate")
bim.fn <- system.file("extdata", "plinkhapmap.bim.gz", package="SNPRelate")
gdsfile <- "snps.gds"
snpgdsBED2GDS(bed.fn, fam.fn, bim.fn, gdsfile, family=TRUE,
cvt.chr="int", cvt.snpid="int", verbose=FALSE)
library(GWASdata)
file <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
gds <- GdsGenotypeReader(file)
# need scan annotation with sex
data(illuminaScanADF)
biocLite("GWASdata")
library(GWASdata)
file <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
gds <- GdsGenotypeReader(file)
# need scan annotation with sex
data(illuminaScanADF)
genoData <- GenotypeData(gds, scanAnnot=illuminaScanADF)
afreq <- alleleFrequency(genoData, scan.exclude=(illuminaScanADF$race != "CEU"))
close(genoData)
View(afreq)
View(afreq)
genoData <- GenotypeData(gds, scanAnnot=illuminaScanADF)
library(GWASdata)
file <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
gds <- GdsGenotypeReader(file)
# need scan annotation with sex
data(illuminaScanADF)
genoData <- GenotypeData(gds, scanAnnot=illuminaScanADF)
genoData.data
genoData$data
genoData@data
genoData@data
a <- genoData@data
a@genotypeVar
a
# open
genofile <- snpgdsOpen("HapMap.gds")
RV <- snpgdsPCA(genofile)
plot(RV$eigenvect[,2], RV$eigenvect[,1], xlab="PC 2", ylab="PC 1",
col=rgb(0,0,150, 50, maxColorValue=255), pch=19)
# close the file
snpgdsClose(genofile)
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
genofile
class(genofile)
# "SNPGDSFileClass" "gds.class"
# close the file
snpgdsClose(genofile)
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
genofile
class(genofile)
# "SNPGDSFileClass" "gds.class"
# close the file
snpgdsClose(genofile)
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
genofile
genofile@data
genofile
genofile$id
genofile$root
genofile$root
genofile$root
read.gdsn(index.gdsn(f, "vector"))
read.gdsn(index.gdsn(f, "list"))
read.gdsn(index.gdsn(f, "data.frame"))
read.gdsn(index.gdsn(f, "vector"))
read.gdsn(index.gdsn(f, "list"))
read.gdsn()
read.gdsn(genofile)
read.gdsn(genofile$root)
read.gdsn(index.gdsn(genofile$root, "vector"))
read.gdsn(index.gdsn(genofile$root, "fileame"))
f <- createfn.gds("test.gds")
add.gdsn(f, "vector", 1:128)
add.gdsn(f, "list", list(X=1:10, Y=seq(1, 10, 0.25)))
add.gdsn(f, "data.frame", data.frame(X=1:19, Y=seq(1, 10, 0.5)))
add.gdsn(f, "matrix", matrix(1:12, ncol=4))
f
genofile
read.gdsn(index.gdsn(genofile$root, "sample.id"))
genofile
read.gdsn(index.gdsn(genofile$root, "snp.allele"))
read.gdsn(index.gdsn(genofile$root, "snp."))
genofile
read.gdsn(index.gdsn(genofile$root, "snp.rs.id"))
f <- createfn.gds("test.gds")
add.gdsn(f, "vector", 1:128)
add.gdsn(f, "list", list(X=1:10, Y=seq(1, 10, 0.25)))
add.gdsn(f, "data.frame", data.frame(X=1:19, Y=seq(1, 10, 0.5)))
add.gdsn(f, "matrix", matrix(1:12, ncol=4))
fsnpgdsSummary(snpgdsExampleFileName())
snpgdsSummary(snpgdsExampleFileName())
snpgdsSummar(genofile)
snpgdsSummary(genofile)
read.gdsn(index.gdsn(genofile$root, "snp.position"))
chr <- read.gdsn(index.gdsn(genofile, "snp.chromosome"))
CORR <- snpgdsPCACorr(pca, genofile, eig.which=1:4)
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
# run PCA
RV <- snpgdsPCA(genofile)
# eigenvalues
head(RV$eigenval)
# variance proportion (%)
head(round(RV$varprop*100, 2))
plot(RV)
RV$sample.id
RV$snp.id
RV$eigenval
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
# run PCA
RV <- snpgdsPCA(genofile)
# eigenvalues
head(RV$eigenval)
# variance proportion (%)
head(round(RV$varprop*100, 2))
read.gdsn(index.gdsn(genofile$root, "snp.position"))
read.gdsn(index.gdsn(genofile$root, "sample.id"))
read.gdsn(index.gdsn(genofile$root, "snp.id"))
read.gdsn(index.gdsn(genofile$root, "snp.allele"))
genoClusterPlot()
genofile
read.gdsn(index.gdsn(genofile$root, "genotpe"))
read.gdsn(index.gdsn(genofile$root, "genotype"))
genofile
read.gdsn(index.gdsn(genofile$root, "snp.id"))
genofile
read.gdsn(index.gdsn(genofile$root, "genotype"))
a <- read.gdsn(index.gdsn(genofile$root, "genotype"))
View(a)
View(a)
View(a)
View(a)
# open an example dataset (HapMap)
genofile <- snpgdsOpen(snpgdsExampleFileName())
# run PCA
RV <- snpgdsPCA(genofile)
# eigenvalues
head(RV$eigenval)
# variance proportion (%)
head(round(RV$varprop*100, 2))
system("python /Users/gaoce/Projects/GitHub/GMCM/2016/problem-set/B/B题附件/generate-ped.py")
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
library(randomForest)
library(doParallel)
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
rtdata <- read.table("prepass-for-rt.dat", header = TRUE)
rtdata[, 'healthy'] <- as.factor(rtdata[, 'healthy'])
setwd("~/Projects/GitHub/GMCM/2016/problem-set/B/B题附件")
rtdata <- read.table("prepass-for-rt.dat", header = TRUE)
rtdata[, 'healthy'] <- as.factor(rtdata[, 'healthy'])
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE, ntree = 1000)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE, ntree = 1000)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE, ntree = 2000)
snp.rf
realdata <- rtdata[, c(1, 2939, 1793)]
snp.rf <- randomForest(healthy ~ ., data=realdata, importance=TRUE, proximity=TRUE, ntree = 2000)
snp.rf
